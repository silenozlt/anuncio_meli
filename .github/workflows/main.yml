name: Docker CI/CD for Mercado Livre Script

on:
  push:
    branches:
      - main # O workflow será acionado em cada push para a branch 'main'
  workflow_dispatch: # Permite acionar o workflow manualmente pela UI do GitHub

env:
  DOCKER_IMAGE_NAME: ml-product-sync # Nome da sua imagem Docker
  DOCKER_REGISTRY: ghcr.io/${{ github.repository_owner }} # Usando GitHub Container Registry (GHCR)

jobs:
  build_and_push:
    runs-on: ubuntu-latest # O runner que executará as ações

    permissions:
      contents: read
      packages: write # Permissão necessária para push para GHCR

    # Definindo as variáveis de ambiente para este job, lendo dos GitHub Secrets
    # Estas variáveis são principalmente para o tempo de execução do contêiner Docker,
    # mas são listadas aqui para demonstrar como os segredos são acessados no workflow.
    env:
      CLIENT_ID: ${{ secrets.ML_CLIENT_ID }}
      CLIENT_SECRET: ${{ secrets.ML_CLIENT_SECRET }}
      REFRESH_TOKEN: ${{ secrets.ML_REFRESH_TOKEN }}
      SELLER_ID: ${{ secrets.ML_SELLER_ID }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASS: ${{ secrets.DB_PASS }}
      DB_NAME: ${{ secrets.DB_NAME }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Clona seu repositório

      # Passo adicionado: Configura o Buildx para usar o driver 'docker-container'
      # Este driver suporta o cache de ações do GitHub (type=gha)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }} # Token automático fornecido pelo GitHub

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha,format=short
            type=ref,event=branch

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # O diretório onde o Dockerfile está (raiz do repositório)
          push: true # Faz o push da imagem para o registry
          tags: ${{ steps.meta.outputs.tags }} # Usa as tags geradas pelo metadata-action
          labels: ${{ steps.meta.outputs.labels }} # Usa os labels gerados pelo metadata-action
          # Cache para builds mais rápidos
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Verify pushed image (optional)
        run: |
          echo "Imagem Docker construída e enviada com sucesso para:"
          echo "${{ steps.meta.outputs.tags }}"

# Para tornar a imagem Docker pública no GitHub Container Registry (GHCR) para pull sem autenticação:
# 1. Certifique-se de que o repositório GitHub (onde este workflow está) é PÚBLICO.
# 2. Após a primeira execução bem-sucedida deste workflow que envia a imagem para o GHCR,
#    vá para a aba 'Packages' (Pacotes) no seu perfil ou organização no GitHub.
# 3. Encontre o pacote da sua imagem (ml-product-sync).
# 4. Nas configurações do pacote, altere a visibilidade de 'Private' (Privado) para 'Public' (Público).
#    Uma vez feito isso, qualquer pessoa poderá puxar a imagem sem autenticação.


